#!/bin/bash
#
# +-----------------------------------------------------------------------------------+
# | Copyright (C) 2016 David Vasquez                                                  |
# | MIT license                                                                       |
# | Permission is hereby granted, free of charge, to any person obtaining a copy of   |	
# | this software and associated documentation files (the "Software"), to deal in the | 
# | Software without restriction, including without limitation the rights to use,     |
# | copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the   | 
# | Software, and to permit persons to whom the Software is furnished to do so,       |
# | subject to the following conditions:                                              |
#
# | The above copyright notice and this permission notice shall be included in all    | 
# | copies or substantial portions of the Software.                                   |
#                                                       
# | THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR        |
# | IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS  |
# | FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR    |
# | COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN |
# | AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION   |
# | WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                   |                                                 
# +-----------------------------------------------------------------------------------+
# | This code is designed, written and maintained by David Vasquez    		      |
# | Any questions, comments or advice on this code                                    |
# | should be addressed to:                                                           |
# | davidva@tutanota.com                                                              |
# +-----------------------------------------------------------------------------------+

directory=/root/build
repodirectory=/root/enjoy
MOCK_DEF_PATH=${directory}/mock


usage() {
  echo ""
  echo -e '\e[33m  -g url_git\e[0m'
  echo "    The git hub name user and project, example UnitedRPMs/ffmpeg"
  echo "Usage: $0 -g UnitedRPMs/ffmpeg -s ffmpeg.spec -t fedora-24-x86_64"
  echo ""
  echo -e '\e[33m  -m massive\e[0m'
  echo "    Make a massive rebuild rpm, the task is slow"
  echo "Usage: $0 -o UnitedRPMs -m true -t fedora-25-x86_64"
  echo ""
  echo -e '\e[33m  -r SRPM\e[0m'
  echo "    Rebuild a src.rpm from remote url"
  echo "Usage: $0 -t fedora-25-x86_64 -r http:www.foo/ffmpeg-foo.src.rpm "
  echo ""
  echo -e '\e[33m  -n SNAPSHOT\e[0m'
  echo "    Generate the source file with a special script example ffmpeg-snapshot.sh "
  echo "Usage: $0 -g UnitedRPMs/ffmpeg -s ffmpeg.spec -t fedora-25-x86_64 -n ffmpeg-snapshot.sh "
  echo ""
  echo -e '\e[33m  -r NO_MOCK\e[0m'
  echo "    Generate a rpm without mock, this task is not 100% reliable, but it works in some cases"
  echo "Usage: $0 -g UnitedRPMs/ffmpeg -s ffmpeg.spec -r true -d 'dist .fc25' "
  echo "--------------------------------------"
  echo "  -s SPECfile"
  echo '    The name of the RPM SPEC file, example "-s ffmpeg.spec" '
  echo "  -o organization"
  echo "    The name of the organization GIT, only in massive task."
  echo "  -t TARJET"
  echo '    mock config example "-t fedora-26-x86_64" '
  echo "  -d DIST"
  echo "    Distribution number, only works with NO_MOCK; example: -r true -d 'dist .fc25' "
  exit 1
}

readargs() {
  while [ "$#" -gt 0 ] ; do
    case "$1" in
       -s)
        if [ "$2" ] ; then
          specfile="$2"
          shift ; shift
        else
          echo "Missing a value for $1."
          echo
          shift
          usage
        fi
      ;;
      -t)
        if [ "$2" ] ; then
          TARJET="$2"
          shift ; shift
        else
          echo "Missing a value for $1."
          echo
          shift
          usage
        fi
      ;;
      -o)
        if [ "$2" ] ; then
          organization="$2"
          shift ; shift
        else
          echo "Missing a value for $1."
          echo
          shift
          usage
        fi
      ;;
      -g)
        if [ "$2" ] ; then
          url_git="$2"
          shift ; shift
        else
          echo "Missing a value for $1."
          echo
          shift
          usage
        fi
      ;;
      -d)
        if [ "$2" ] ; then
          DIST="$2"
          shift ; shift
        else
          echo "Missing a value for $1."
          echo
          shift
          usage
        fi
      ;;
      -m)
        if [ "$2" ] ; then
          massive="$2"
          shift ; shift
        else
          echo "Missing a value for $1."
          echo
          shift
          usage
        fi
      ;;
      -n)
        if [ "$2" ] ; then
          SNAPSHOT="$2"
          shift ; shift
        else
          echo "Missing a value for $1."
          echo
          shift
          usage
        fi
      ;;
      -r)
        if [ "$2" ] ; then
          NO_MOCK="$2"
          shift ; shift
        else
          echo "Missing a value for $1."
          echo
          shift
          usage
        fi
      ;;
      *)
        echo "Unknown option or argument $1."
        echo
        shift
        usage
      exit
      ;;
    esac
  done
}


checkargs() {
 if [ -z "${TARJET}" ] && [ -n ${NO_MOCK} ] && [ ${NO_MOCK} = true ]; then
    echo 'Using rpmbuild mode'
 elif [ -z "${TARJET}" ] && [ -z ${NO_MOCK} ] ; then
    echo -e '\e[31mMissing tarjet, example your need add "-t fedora-25-x86_64"\e[0m'
    usage
    exit
  fi
}

name_build() {
name=$( echo $specfile | awk -F '.' '{print $1}' )
}

path_chroot() {
chrootmock=${directory}/mock/${TARJET}/result
}

sign_rpm() {
rpm --define "_gpg_name The UnitedRPMs Project" --addsign *.rpm
}

make_directory_task() {
echo -e "\e[32mCreating job directories...\e[0m"
  mkdir -p ${directory}/rpmbuild/{RPMS,BUILD,SOURCES,SRPMS,GIT}
  mkdir -p ${repodirectory}
  mkdir -p ${MOCK_DEF_PATH}
  mkdir -p ${MOCK_DEF_PATH}/cache
  mkdir -p ~/.config/
}

git_task() {
echo -e "\e[32mCloning repository $url_git...\e[0m"
name_build
git clone https://github.com/$url_git.git ${directory}/rpmbuild/GIT/$name
}

buildrpm() {
echo -e "\e[32mMaking an rpm source...\e[0m"
name_build
  pushd ${directory}/rpmbuild/GIT/$name/
if [ -n "$SNAPSHOT" ]; then
  chmod a+x $SNAPSHOT
  ./$SNAPSHOT
fi
  spectool -g ${specfile}
  rpmbuild --define "_topdir $PWD" --define "_sourcedir $PWD" -bs ${specfile}
echo -e "\e[32mMaking rpm for $name...\e[0m"
if [ -n ${NO_MOCK} ] && [ ${NO_MOCK} = true ]; then
  dnf -y update
  rpmbuild --define "_topdir $PWD" --define "${DIST}" --rebuild $PWD/SRPMS/$name-*.src.rpm
else
  /usr/bin/mock -r ${TARJET} --no-cleanup-after --resultdir=$MOCK_DEF_PATH $PWD/SRPMS/$name-*.src.rpm  
fi
  popd
}

local_repo() {
path_chroot
name_build
echo -e "\e[32mMaking local repository...\e[0m"
if [ -n ${NO_MOCK} ] && [ ${NO_MOCK} = true ]; then
pushd ${directory}/rpmbuild/GIT/$name/
cp -f *.fc*.*rpm ${repodirectory}/
else
pushd $MOCK_DEF_PATH/
cp -f *.fc*.*rpm ${repodirectory}/
fi
pushd ${repodirectory}/
sign_rpm
createrepo .
popd
 popd
}

enjoy_repo() {
echo '
[enjoy]
name=enjoy
baseurl=file:///root/enjoy
enabled=1
skip_if_unavailable=1
gpgcheck=0
' > changdata.txt 

f1="$(<changdata.txt)"
awk -vf1="$f1" '/# repos/{print;print f1;next}1' /etc/mock/${TARJET}.cfg | tee /tmp/new_repo.cfg
pushd /etc/mock/
mv -f /tmp/new_repo.cfg ${TARJET}.cfg
 popd
}

upload_rpm() {
echo -e "\e[32mUploading results...\e[0m"
pushd ${repodirectory}/
ls *.rpm | tee output-result.txt
sign_rpm

Ou=output-result.txt
while IFS= read -r result; do
if [ $(ls $result | grep -c fc24) -gt 0 ]; then
megaput $result --path /Root/unitedrpms/updates/24/
elif [ $(ls $result | grep -c fc25) -gt 0 ]; then
megaput $result --path /Root/unitedrpms/updates/25/
elif [ $(ls $result | grep -c fc26) -gt 0 ]; then
megaput $result --path /Root/unitedrpms/updates/26/
elif [ $(ls $result | grep -c fc27) -gt 0 ]; then
megaput $result --path /Root/unitedrpms/updates/27/
elif [ $(ls $result | grep -c fc28) -gt 0 ]; then
megaput $result --path /Root/unitedrpms/updates/28/
elif [ $(ls $result | grep -c fc29) -gt 0 ]; then
megaput $result --path /Root/unitedrpms/updates/29/
elif [ $(ls $result | grep -c fc30) -gt 0 ]; then
megaput $result --path /Root/unitedrpms/updates/30/
fi
done <"$Ou"
popd
}

rules_directory() {
chown -R 1000:1000 $directory
chown -R 1000:1000 $repodirectory
# chown -R 1000:1000 $MOCK_DEF_PATH
chmod g+rws $MOCK_DEF_PATH
chmod g+rws ${MOCK_DEF_PATH}/cache
}


performance_mock() {
echo 'config_opts['basedir'] = '/home/makerpm/mock/'
config_opts['cache_topdir'] = '/home/makerpm/mock/cache'
config_opts['use_container_host_hostname'] = True
config_opts['docker_unshare_warning'] = False
config_opts['nosync_force'] = True
config_opts['plugin_conf']['tmpfs_enable'] = True
config_opts['plugin_conf']['tmpfs_opts'] = {}
config_opts['plugin_conf']['tmpfs_opts']['required_ram_mb'] = 1024
config_opts['plugin_conf']['tmpfs_opts']['max_fs_size'] = '50g'
config_opts['plugin_conf']['tmpfs_opts']['mode'] = '0755'
config_opts['plugin_conf']['tmpfs_opts']['keep_mounted'] = False
' > perf.txt

f1="$(<perf.txt)"
awk -vf1="$f1" '/package_manager/{print;print f1;next}1' /etc/mock/${TARJET}.cfg | tee /tmp/new_perf.cfg
pushd /etc/mock/
mv -f /tmp/new_perf.cfg ${TARJET}.cfg
 popd
}

check_depends() {
if [ ! -f /usr/lib64/nosync/nosync.so ]; then
dnf -y install nosync 
fi
}

#  BEGIN THE PROGRAM

readargs "$@"

checkargs

# We need some programs
# check_depends

# Here we will make our local repository
enjoy_repo

# Mock is quite slow. In fact the whole VM/docker was quite slow, then the new changes reduces the time.
# performance_mock

# Here we will make our job directories
make_directory_task

# Rules for our directories; I changed the default path in mock, then I need rules...
rules_directory

# HERE BEGIN THE BUILD PROCESS #
# MASIVE TASK
if [ "$massive" = true ]; then
echo -e "\e[35mStarting massive task...\e[0m"
rm -f ${directory}/${organization}.txt
curl -s https://api.github.com/orgs/UnitedRPMs/repos?per_page=200 | grep html_url | grep "UnitedRPMs/" | awk -F '"html_url": "' '{print $2}' | awk -F '",' '{print $1}' | sed 's/$/.git/' | tee ${directory}/${organization}.txt

# clone all git repositories
echo -e "\e[32mCloning all repositories $url_git...\e[0m"
pushd ${directory}/rpmbuild/GIT/
file=${directory}/${organization}.txt
while IFS= read -r line; do
        # display $line or do something with $line
    git clone $line 
done <"$file"

# srpm and build task
echo -e "\e[32mMaking rpm...\e[0m"
rm -f repositories.txt
ls -d */ | sed 's:/::g' | grep -v -e "chromium-freeworld" -e "kodi" -e "vlc" | tee repositories.txt
file=repositories.txt
while IFS= read -r liner; do
        # display $liner or do something with $liner
pushd $liner
if [ $(ls | grep -c .spec) -gt 0 ]; then
  spectool -g *.spec
  rpmbuild --define "_topdir $PWD" --define "_sourcedir $PWD" -bs *.spec
if [ -n ${NO_MOCK} ] && [ ${NO_MOCK} = true ]; then
  dnf -y update
  rpmbuild --define "_topdir $PWD" --define "${DIST}" --rebuild $PWD/SRPMS/*.src.rpm
  find $PWD/ -name '*.rpm' -exec cp  {} $MOCK_DEF_PATH/ \;
else
  /usr/bin/mock -r $TARJET --no-cleanup-after --resultdir=$MOCK_DEF_PATH $PWD/SRPMS/*.src.rpm 
fi
local_repo
else
echo "the repository $liner does not include a spec file"
fi
popd  
done <"$file"
popd  
local_repo
upload_rpm
echo -e "\e[36mDONE...\e[0m"
# REMOTE Task only if you need rebuild a src.rpm from remote url
elif [ -n "$SRPM" ]; then
echo -e "\e[32mDownloading and Rebuilding src.rpm ...\e[0m"
  wget -c -P $PWD/SRPMS/ $SRPM
  /usr/bin/mock -r $TARJET --no-cleanup-after --resultdir=$MOCK_DEF_PATH $PWD/SRPMS/*.src.rpm 
  local_repo
  upload_rpm
echo -e "\e[36mDONE...\e[0m"
# END REMOTE URL
else
echo -e "\e[35mStarting complete task...\e[0m"
git_task
buildrpm
local_repo
upload_rpm
echo -e "\e[36mDONE...\e[0m"
fi
