#!/bin/bash
#
# +-----------------------------------------------------------------------------------+
# | Copyright (C) 2017 David Vasquez                                                  |
# | MIT license                                                                       |
# | Permission is hereby granted, free of charge, to any person obtaining a copy of   |	
# | this software and associated documentation files (the "Software"), to deal in the | 
# | Software without restriction, including without limitation the rights to use,     |
# | copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the   | 
# | Software, and to permit persons to whom the Software is furnished to do so,       |
# | subject to the following conditions:                                              |
#
# | The above copyright notice and this permission notice shall be included in all    | 
# | copies or substantial portions of the Software.                                   |
#                                                       
# | THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR        |
# | IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS  |
# | FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR    |
# | COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN |
# | AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION   |
# | WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                   |                                                 
# +-----------------------------------------------------------------------------------+
# | This code is designed, written and maintained by David Vasquez    		      |
# | Any questions, comments or advice on this code                                    |
# | should be addressed to:                                                           |
# | davidva@tutanota.com                                                              |
# +-----------------------------------------------------------------------------------+

directory=$HOME/build
repodirectory=$HOME/enjoy
MOCK_DEF_PATH=${directory}/mock
date=$(date +%Y%m%d_%H:%M:%S)

usage() {
  echo ""
  echo -e '\e[33m  -g url_git\e[0m'
  echo "    The git hub name user and project, example UnitedRPMs/ffmpeg"
  echo "Usage: $0 -g UnitedRPMs/ffmpeg -s ffmpeg.spec -t fedora-24-x86_64"
  echo ""
  echo -e '\e[33m  -m massive\e[0m'
  echo "    Make a massive rebuild rpm, the task is slow"
  echo "Usage: $0 -o UnitedRPMs -m true -t fedora-25-x86_64"
  echo ""
  echo -e '\e[33m  -r SRPM\e[0m'
  echo "    Rebuild a src.rpm from remote url"
  echo "Usage: $0 -t fedora-25-x86_64 -r http:www.foo/ffmpeg-foo.src.rpm "
  echo ""
  echo -e '\e[33m  -n SNAPSHOT\e[0m'
  echo "    Generate the source file with a special script example ffmpeg-snapshot.sh "
  echo "Usage: $0 -g UnitedRPMs/ffmpeg -s ffmpeg.spec -t fedora-25-x86_64 -n ffmpeg-snapshot.sh "
  echo ""
  echo -e '\e[33m  -r NO_MOCK\e[0m'
  echo "    Generate a rpm without mock, this task is not 100% reliable, but it works in some cases"
  echo "Usage: $0 -g UnitedRPMs/ffmpeg -s ffmpeg.spec -r true -d 'dist .fc25' "
  echo "--------------------------------------"
  echo "  -s SPECfile"
  echo '    The name of the RPM SPEC file, example "-s ffmpeg.spec" '
  echo "  -o organization"
  echo "    The name of the organization GIT, only in massive task."
  echo "  -t TARGET"
  echo '    mock config example "-t fedora-26-x86_64" '
  echo "  -d DIST"
  echo "    Distribution number, only works with NO_MOCK; example: -r true -d 'dist .fc25' "
  exit 1
}

readargs() {
  while [ "$#" -gt 0 ] ; do
    case "$1" in
       -s)
        if [ "$2" ] ; then
          specfile="$2"
          shift ; shift
        else
          echo "Missing a value for $1."
          echo
          shift
          usage
        fi
      ;;
      -t)
        if [ "$2" ] ; then
          TARGET="$2"
          shift ; shift
        else
          echo "Missing a value for $1."
          echo
          shift
          usage
        fi
      ;;
      -o)
        if [ "$2" ] ; then
          organization="$2"
          shift ; shift
        else
          echo "Missing a value for $1."
          echo
          shift
          usage
        fi
      ;;
      -g)
        if [ "$2" ] ; then
          url_git="$2"
          shift ; shift
        else
          echo "Missing a value for $1."
          echo
          shift
          usage
        fi
      ;;
      -b)
        if [ "$2" ] ; then
          massive_spec="$2"
          shift ; shift
        else
          echo "Missing a value for $1."
          echo
          shift
          usage
        fi
      ;;
      -d)
        if [ "$2" ] ; then
          DIST="$2"
          shift ; shift
        else
          echo "Missing a value for $1."
          echo
          shift
          usage
        fi
      ;;
      -m)
        if [ "$2" ] ; then
          massive="$2"
          shift ; shift
        else
          echo "Missing a value for $1."
          echo
          shift
          usage
        fi
      ;;
      -n)
        if [ "$2" ] ; then
          SNAPSHOT="$2"
          shift ; shift
        else
          echo "Missing a value for $1."
          echo
          shift
          usage
        fi
      ;;
      -r)
        if [ "$2" ] ; then
          NO_MOCK="$2"
          shift ; shift
        else
          echo "Missing a value for $1."
          echo
          shift
          usage
        fi
      ;;
      *)
        echo "Unknown option or argument $1."
        echo
        shift
        usage
      exit
      ;;
    esac
  done
}


checkargs() {
 if [ -z "${TARGET}" ] && [ "${NO_MOCK}" = true ]; then
    echo 'Using rpmbuild mode'
 elif [ -n "${TARGET}" ] && [ -z "${NO_MOCK}" ]; then
    echo 'Using mock mode'
 elif [ -z "${TARGET}" ] && [ -z "${NO_MOCK}" ] ; then
    echo -e '\e[31mMissing target, example your need add "-t fedora-25-x86_64"\e[0m'
    usage
exit
  fi
}

SRPMcheck() {
if [ ! -f $PWD/SRPMS/${name}-*.src.rpm ]; then
echo 'Hey check your urls of sources and patches'
exit 1
fi
}

name_build() {
name=$( echo ${specfile} | awk -F '.' '{print $1}' )
}

path_chroot() {
chrootmock=${directory}/mock/${TARGET}/result
}

sign_rpm() {
rpm --define "_gpg_name The UnitedRPMs Project" --addsign *.rpm
}

make_directory_task() {
echo -e "\e[32mCreating job directories...\e[0m"
  mkdir -p ${directory}/rpmbuild/{RPMS,BUILD,SOURCES,SRPMS,GIT}
  mkdir -p ${repodirectory}
  mkdir -p ${MOCK_DEF_PATH}
  mkdir -p ${MOCK_DEF_PATH}/cache
  mkdir -p ~/.config/
}

git_task() {
echo -e "\e[32mCloning repository ${url_git}...\e[0m"
name_build
git clone https://github.com/${url_git}.git ${directory}/rpmbuild/GIT/${name}
}

buildrpm() {
echo -e "\e[32mMaking an rpm source...\e[0m"
name_build
  pushd ${directory}/rpmbuild/GIT/${name}/
if [ -n "${SNAPSHOT}" ]; then
  chmod a+x ${SNAPSHOT}
  ./${SNAPSHOT}
fi
if [ "${massive_spec}" = true ]; then
  Inrelease 
fi
  spectool -g ${specfile}
  rpmbuild --define "_topdir $PWD" --define "_sourcedir $PWD" -bs ${specfile}
echo -e "\e[32mMaking rpm for ${name}...\e[0m"
# if [ -n "${NO_MOCK}" ] && [ "${NO_MOCK}" = true ]; then
if [ "${NO_MOCK}" = true ] && [ -z "${TARGET}" ]; then
SRPMcheck
  dnf -y update
  dnf -y install @development-tools
  dnf -y install gcc gcc-c++
  dnf -y builddep ${specfile}
  rpmbuild --define "_topdir $PWD" --define "${DIST}" --rebuild $PWD/SRPMS/${name}-*.src.rpm
  find . -type f -name "*.rpm" -exec cp  {} ${MOCK_DEF_PATH}/ \;
elif [ -n "${TARGET}" ] && [ -z "${NO_MOCK}" ]; then
SRPMcheck
  /usr/bin/mock -r ${TARGET} --no-cleanup-after --resultdir=${MOCK_DEF_PATH} $PWD/SRPMS/${name}-*.src.rpm  
fi
  popd
}

local_repo() {
path_chroot
name_build
echo -e "\e[32mMaking local repository...\e[0m"
pushd ${MOCK_DEF_PATH}/
cp -f *.fc*.*rpm ${repodirectory}/
 popd
pushd ${repodirectory}/
sign_rpm
createrepo .
popd
}

enjoy_repo() {
#if [ -n ${NO_MOCK} ] && [ ${NO_MOCK} = true ]; then
if [ "${NO_MOCK}" = true ] && [ -z "${TARGET}" ]; then
echo '[enjoy]
name=enjoy
baseurl=file:///root/enjoy
enabled=1
skip_if_unavailable=1
gpgcheck=0
' > /etc/yum.repos.d/enjoy.repo
elif [ -n "${TARGET}" ] && [ -z "${NO_MOCK}" ]; then
if [ ! -f /etc/mock/${TARGET}.cfg ]; then
echo 'The build config mock does not exist'
echo 'Check your configuration or update your mock package'
usage
exit
fi
echo '
[enjoy]
name=enjoy
baseurl=file:///root/enjoy
enabled=1
skip_if_unavailable=1
gpgcheck=0
' > changdata.txt 

f1="$(<changdata.txt)"
awk -vf1="$f1" '/# repos/{print;print f1;next}1' /etc/mock/${TARGET}.cfg | tee /tmp/new_repo.cfg
pushd /etc/mock/
mv -f /tmp/new_repo.cfg ${TARGET}.cfg
 popd
fi
}

upload_rpm() {
echo -e "\e[32mUploading results...\e[0m"
pushd ${repodirectory}/
ls *.rpm | sort -u > output-result.txt
sign_rpm

if [ -n "${TARGET}" ]; then
cp -f ${MOCK_DEF_PATH}/build.log ${date}_build.log
cp -f ${MOCK_DEF_PATH}/root.log ${date}_root.log
cp -f ${MOCK_DEF_PATH}/state.log ${date}_state.log
megaput ${date}_build.log --path /Root/logs/
megaput ${date}_root.log --path /Root/logs/
megaput ${date}_state.log --path /Root/logs/
fi

Ou=output-result.txt
while IFS= read -r result; do
if [ $(ls $result | grep -c fc24) -gt 0 ]; then
megaput $result --path /Root/unitedrpms/updates/repository/
elif [ $(ls $result | grep -c fc25) -gt 0 ]; then
megaput $result --path /Root/unitedrpms/updates/25/
elif [ $(ls $result | grep -c fc26) -gt 0 ]; then
megaput $result --path /Root/unitedrpms/updates/26/
elif [ $(ls $result | grep -c fc27) -gt 0 ]; then
megaput $result --path /Root/unitedrpms/updates/27/
elif [ $(ls $result | grep -c fc28) -gt 0 ]; then
megaput $result --path /Root/unitedrpms/updates/28/
elif [ $(ls $result | grep -c fc29) -gt 0 ]; then
megaput $result --path /Root/unitedrpms/updates/29/
elif [ $(ls $result | grep -c fc30) -gt 0 ]; then
megaput $result --path /Root/unitedrpms/updates/30/
fi
done <"$Ou"
echo -e "\e[35mSynced with Mega Successfully...\e[0m"
popd

zlog=$( du -k ${MOCK_DEF_PATH}/build.log | cut -f1 )
b=800
if [ -n "${TARGET}" ] && [ $zlog \> $b ] || [ "${massive_spec}" = true ]; then
echo 'This log is too long to be displayed'
elif [ -n "${TARGET}" ] && [ "$b" -gt "$zlog" ]; then
cat ${MOCK_DEF_PATH}/build.log
fi
}

rules_directory() {
chown -R 1000:1000 ${directory}
chown -R 1000:1000 ${repodirectory}
# chown -R 1000:1000 ${MOCK_DEF_PATH}
chmod g+rws ${MOCK_DEF_PATH}
chmod g+rws ${MOCK_DEF_PATH}/cache
}


performance_mock() {
echo 'config_opts['basedir'] = '/home/makerpm/mock/'
config_opts['cache_topdir'] = '/home/makerpm/mock/cache'
config_opts['use_container_host_hostname'] = True
config_opts['docker_unshare_warning'] = False
config_opts['nosync_force'] = True
config_opts['plugin_conf']['tmpfs_enable'] = True
config_opts['plugin_conf']['tmpfs_opts'] = {}
config_opts['plugin_conf']['tmpfs_opts']['required_ram_mb'] = 1024
config_opts['plugin_conf']['tmpfs_opts']['max_fs_size'] = '50g'
config_opts['plugin_conf']['tmpfs_opts']['mode'] = '0755'
config_opts['plugin_conf']['tmpfs_opts']['keep_mounted'] = False
' > perf.txt

f1="$(<perf.txt)"
awk -vf1="$f1" '/package_manager/{print;print f1;next}1' /etc/mock/${TARGET}.cfg | tee /tmp/new_perf.cfg
pushd /etc/mock/
mv -f /tmp/new_perf.cfg ${TARGET}.cfg
 popd
}

check_depends() {
if [ ! -f /usr/lib64/nosync/nosync.so ]; then
dnf -y install nosync 
fi
}

massrebuild() {
if [ -f importantbump ]; then
file=importantbump
while IFS= read -r line; do
        # display $line or do something with $line
/urpms -g UnitedRPMs/$line -s $line.spec -t ${TARGET} -b true
done <"$file"
local_repo
fi
}

massdependency() {
name_build
if [ ${name} = x264 ]; then
repoquery --whatrequires x264-libs --source | grep -v x264 | perl -pe 's/-\d.*?-\d+(\..*)?\.fc\d+(\..*)?.src.rpm//' | sort -u > importantbump
massrebuild
elif [ ${name} = x265 ]; then
repoquery --whatrequires x265-libs --source | grep -v x265 | perl -pe 's/-\d.*?-\d+(\..*)?\.fc\d+(\..*)?.src.rpm//' | sort -u > importantbump
massrebuild
elif [ ${name} = ffmpeg ]; then
repoquery --whatrequires ffmpeg-libs --source | grep -v ffmpeg | perl -pe 's/-\d.*?-\d+(\..*)?\.fc\d+(\..*)?.src.rpm//' | sort -u > importantbump
massrebuild
elif [ ${name} = libquicktime ]; then
repoquery --whatrequires libquicktime --source | grep -v libquicktime | perl -pe 's/-\d.*?-\d+(\..*)?\.fc\d+(\..*)?.src.rpm//' | sort -u > importantbump
massrebuild
else
echo 'No massive dependencies found or added to list'
fi
}

Inrelease() {
name_build
SRE=$( sed -n '/Release:/=' ${specfile} | sort | head -1 )
rele=$(cat ${specfile} | grep "Release:" | awk '{ print $NF }' | grep -o '[0-9]*')
increrele=$(($rele+1))
sed -i "${SRE}s/${rele}/${increrele}/" ${specfile}

dt=$(export LC_ALL=C && date "+%a %b %d %Y")

spver=$(rpm -q --qf "%{version}\n" --specfile ${specfile} | head -1)
specrl=$(rpm -q --qf "%{release}\n" --specfile ${specfile} | head -1)

echo "
* $dt Unitedrpms Project <unitedrpms AT protonmail DOT com> ${spver}-${specrl}  
- Mass Rebuild

" > changdata.txt

f1="$(<changdata.txt)"

awk -vf1="$f1" '/%changelog/{print;print f1;next}1' ${specfile} | tee ${name}2.spec

mv -f ${name}2.spec ${specfile}

}


#  BEGIN THE PROGRAM

readargs "$@"

checkargs

# We need some programs
# check_depends

# Here we will make our local repository
enjoy_repo

# Mock is quite slow. In fact the whole VM/docker was quite slow, then the new changes reduces the time.
# performance_mock

# Here we will make our job directories
make_directory_task

# Rules for our directories; I changed the default path in mock, then I need rules...
rules_directory

# HERE BEGIN THE BUILD PROCESS #
# MASSIVE TASK ORGANIZATION
if [ "${massive}" = true ]; then
echo -e "\e[35mStarting massive task...\e[0m"
rm -f ${directory}/${organization}.txt
curl -s https://api.github.com/orgs/${organization}/repos?per_page=200 | grep html_url | grep "${organization}/" | awk -F '"html_url": "' '{print $2}' | awk -F '",' '{print $1}' | sed 's/$/.git/' | tee ${directory}/${organization}.txt

# clone all git repositories
echo -e "\e[32mCloning all repositories ${url_git}...\e[0m"
pushd ${directory}/rpmbuild/GIT/
file=${directory}/${organization}.txt
while IFS= read -r line; do
        # display $line or do something with $line
    git clone $line 
done <"$file"

# srpm and build task
echo -e "\e[32mMaking rpm...\e[0m"
rm -f repositories.txt
ls -d */ | sed 's:/::g' | grep -v "chromium-freeworld" | tee repositories.txt
file=repositories.txt
while IFS= read -r liner; do
        # display $liner or do something with $liner
pushd $liner
# Start checking if exist a spec file
if [ $(ls | grep -c .spec) -gt 0 ]; then
  spectool -g *.spec
  rpmbuild --define "_topdir $PWD" --define "_sourcedir $PWD" -bs *.spec
#  if [ -n ${NO_MOCK} ] && [ ${NO_MOCK} = true ]; then
if [ "${NO_MOCK}" = true ] && [ "${massive}" = true ]; then
  dnf -y update
  dnf -y install @development-tools
  dnf -y install gcc gcc-c++
  dnf -y builddep *.spec
  rpmbuild --define "_topdir $PWD" --define "${DIST}" --rebuild $PWD/SRPMS/*.src.rpm
  find . -type f -name "*.rpm" -exec cp  {} ${MOCK_DEF_PATH}/ \;
  find $PWD/SRPMS/ -type f -name "*.src.rpm" -exec cp  {} ${MOCK_DEF_PATH}/ \;
else
  /usr/bin/mock -r ${TARGET} --no-cleanup-after --resultdir=${MOCK_DEF_PATH} $PWD/SRPMS/*.src.rpm 
fi
#
local_repo
else
echo "the repository $liner does not include a spec file"
fi
# End check spec file
popd  
done <"$file"
popd  
local_repo
massdependency
upload_rpm
echo -e "\e[36mDONE...\e[0m"
# END MASSIVE TASK ORGANIZATION

# START REMOTE Task only if you need rebuild a src.rpm from remote url
elif [ -n "${SRPM}" ] && [ "${massive}" != true ]; then
echo -e "\e[32mDownloading and Rebuilding src.rpm ...\e[0m"
  wget -c -P $PWD/SRPMS/ ${SRPM}
# if [ -n ${NO_MOCK} ] && [ ${NO_MOCK} = true ]; then
if [ "${NO_MOCK}" = true ] && [ -n "${SRPM}" ] && [ "${massive}" != true ]; then
  dnf -y update
  dnf -y install @development-tools
  dnf -y install gcc gcc-c++
  dnf -y builddep *.spec
  rpmbuild --define "_topdir $PWD" --define "${DIST}" --rebuild $PWD/SRPMS/*.src.rpm
  find . -type f -name "*.rpm" -exec cp  {} ${MOCK_DEF_PATH}/ \;
  find $PWD/SRPMS/ -type f -name "*.src.rpm" -exec cp  {} ${MOCK_DEF_PATH}/ \;
else
  /usr/bin/mock -r ${TARGET} --no-cleanup-after --resultdir=${MOCK_DEF_PATH} $PWD/SRPMS/*.src.rpm 
fi
  local_repo
massdependency
  upload_rpm
echo -e "\e[36mDONE...\e[0m"
# END REMOTE URL

# START DEFAULT TASK WITHOUT MASSIVE
elif [ -n "${TARGET}" ] || [ "${NO_MOCK}" = true ] && [ "${massive}" != true ]; then
echo -e "\e[35mStarting complete task...\e[0m"
git_task
buildrpm
local_repo
massdependency
upload_rpm
echo -e "\e[32mChecking for rpms in the Cloud ...\e[0m"
upload_rpm
echo -e "\e[36mDONE...\e[0m"
else
usage
exit
fi
#  END ALL
