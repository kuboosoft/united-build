#!/bin/bash
#
# +-----------------------------------------------------------------------------------+
# | Copyright (C) 2017 David Vasquez                                                  |
# | Permission is hereby granted, free of charge, to any person obtaining a copy of   |	
# | this software and associated documentation files (the "Software"), to deal in the | 
# | Software without restriction, including without limitation the rights to use,     |
# | copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the   | 
# | Software, and to permit persons to whom the Software is furnished to do so,       |
# | subject to the following conditions:                                              |
#
# | The above copyright notice and this permission notice shall be included in all    | 
# | copies or substantial portions of the Software.                                   |
#                                                       
# | THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR        |
# | IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS  |
# | FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR    |
# | COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN |
# | AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION   |
# | WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                   |                                                 
# +-----------------------------------------------------------------------------------+
# | This code is designed, written and maintained by David Vasquez    		      |
# | Any questions, comments or advice on this code                                    |
# | should be addressed to:                                                           |
# | davidva@tutanota.com                                                              |
# +-----------------------------------------------------------------------------------+


usage() {
  echo ""
  echo -e '\e[33m  -s sync\e[0m'
  echo "    synchronizes the cloud"
  echo "Usage: $0 -s 25"
  echo ""
  exit 1
}

readargs() {
  while [ "$#" -gt 0 ] ; do
    case "$1" in
       -s)
        if [ "$2" ] ; then
          task="$2"
          shift ; shift
        else
          echo "Missing a value for $1."
          echo
          shift
          usage
        fi
      ;;
      *)
        echo "Unknown option or argument $1."
        echo
        shift
        usage
      exit
      ;;
    esac
  done
}

sf_back() {
sshpass -f $HOME/.chirubito rsync -avP --backup "${user}@frs.sourceforge.net:/home/frs/project/unitedrpms/${task}/" ${motherpath}/
}

clean_old() {
echo -e "\e[31mDelete old versions...\e[0m"
rm -f $(dnf repomanage --keep=2 --old ${motherpath}/x86_64/)
rm -f $(dnf repomanage --keep=2 --old ${motherpath}/x86_64/debug/)
rm -f $(dnf repomanage --keep=2 --old ${motherpath}/srpm/)
}

make_repo() {
rm -rf repodata/
createrepo . 
repoview . 
}

sign_repo() {
echo -e "\e[31mSign repodata...\e[0m"
/usr/bin/gpg2 --local-user 'The UnitedRPMs Project' --yes --detach-sign --armor repodata/repomd.xml
}

sign_rpm() {
rpm --define "_gpg_name The UnitedRPMs Project" --addsign *.rpm
repoview .
}


sfsync() {
echo -e "\e[31mSync with Sf...\e[0m"
pushd ${motherpath}
sshpass -f $HOME/.chirubito rsync -av --delete x86_64/repoview/ ${user}@frs.sourceforge.net:/home/frs/project/unitedrpms/${task}/x86_64/repoview/ 
sshpass -f $HOME/.chirubito rsync -av --delete x86_64/repoview/ ${user}@frs.sourceforge.net:/home/project-web/unitedrpms/htdocs/x86_64/repoview/

sshpass -f $HOME/.chirubito rsync -av --delete x86_64/debug/repoview/ ${user}@frs.sourceforge.net:/home/frs/project/unitedrpms/${task}/x86_64/debug/repoview/
sshpass -f $HOME/.chirubito rsync -av --delete x86_64/debug/repoview/ ${user}@frs.sourceforge.net:/home/project-web/unitedrpms/htdocs/x86_64/debug/repoview/

sshpass -f $HOME/.chirubito rsync -av --delete srpm/repoview/ ${user}@frs.sourceforge.net:/home/frs/project/unitedrpms/${task}/srpm/repoview/ 
sshpass -f $HOME/.chirubito rsync -av --delete srpm/repoview/ ${user}@frs.sourceforge.net:/home/project-web/unitedrpms/htdocs/srpm/repoview/
sshpass -f $HOME/.chirubito rsync -av --delete srpm/repodata/ ${user}@frs.sourceforge.net:/home/project-web/unitedrpms/${task}/srpm/repodata/

sshpass -f $HOME/.chirubito rsync -av --delete x86_64/repodata/ ${user}@frs.sourceforge.net:/home/frs/project/${task}/x86_64/repodata/
sshpass -f $HOME/.chirubito rsync -av --delete x86_64/debug/repodata/ ${user}@frs.sourceforge.net:/home/frs/project/unitedrpms/${task}/x86_64/debug/repodata/

# sshpass -f $HOME/.chirubito rsync -av --ignore-existing x86_64/ ${user}@frs.sourceforge.net:/home/frs/project/unitedrpms/${task}/x86_64/
sshpass -f $HOME/.chirubito rsync -av --delete . ${user}@frs.sourceforge.net:/home/frs/project/unitedrpms/${task}/

popd
}

mdow() {
echo -e "\e[31mDownloading updates...\e[0m"
megacopy --local ${raiz} --remote /Root/unitedrpms/updates/${task}/ --download
}

work_directory() {
mkdir -p ${motherpath}
mkdir -p ${raiz}
mkdir -p ${motherpath}/srpm/repoview/
mkdir -p ${motherpath}/srpm/repodata/
mkdir -p ${motherpath}/x86_64/debug/
mkdir -p ${motherpath}/x86_64/repodata/
}


m_mv() {
pushd $raiz
mv -f *src.rpm ${motherpath}/srpm/
mv -f *debuginfo*.rpm ${motherpath}/x86_64/debug/
mv -f *.rpm ${motherpath}/x86_64/
popd
}

clean_trash() {
find $PWD/ -name "*~" -exec rm -f  {} ${motherpath}/ \;
}

job() {
pushd ${motherpath}/x86_64/
clean_old
sign_rpm
clean_trash
make_repo
sign_repo
popd

pushd ${motherpath}/x86_64/debug/ 
clean_old
sign_rpm
clean_trash
make_repo
sign_repo
popd

pushd ${motherpath}/srpm/
clean_old
sign_rpm 
clean_trash
make_repo
sign_repo
popd
}

mupl() {
echo -e "\e[31mSync with Mega...\e[0m"
if [ -f ${motherpath}/x86_64/repodata/repomd.xml ]; then
megarm /Root/unitedrpms/${task}/x86_64/repodata
megarm /Root/unitedrpms/${task}/x86_64/debug/repodata
megarm /Root/unitedrpms/${task}/srpm/repodata
fi

if [ -f ${motherpath}/x86_64/repoview/index.html ]; then
megarm /Root/unitedrpms/${task}/x86_64/repoview
megarm /Root/unitedrpms/${task}/x86_64/debug/repoview
megarm /Root/unitedrpms/${task}/srpm/repoview
fi

megacopy --local ${motherpath} --remote /Root/unitedrpms/${task}/ 
echo 'Completed sync with Mega'
}

checkfiles() {
if [ "$(ls -A ${raiz})" ]; then
echo "Great ${raiz} is not Empty"
else
echo "${raiz} is Empty"
mupl
exit
fi
}

#-----------------------

#  BEGIN THE PROGRAM
readargs "$@"

if [ ${task} = repository ] || [ ${task} = 25 ] || [ ${task} = 26 ]; then
echo -e "\e[32msync limited to F24-F26...\e[0m"
else
echo 'ERROR'
echo -e "\e[32mSorry, check if exists the current release...\e[0m"
exit
fi

user=kuboosoft
raiz=$HOME/f${task}
motherpath=$HOME/${task}

work_directory
sf_back
mdow
checkfiles
m_mv
job
sfsync
mupl
echo 'DONE'

